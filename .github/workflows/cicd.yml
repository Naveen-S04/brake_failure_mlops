name: CI-CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint
        run: make lint
      - name: Generate synthetic data
        run: python scripts/generate_synthetic_data.py
      - name: Init DVC
        run: dvc init -f
      - name: Reproduce pipeline
        run: dvc repro
      - name: Run tests
        run: make test
      - name: Save metrics
        if: always()
        run: cat artifacts/metrics.json || true

  dockerize:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/brake-failure-api:latest

  deploy-ec2:
    if: github.ref == 'refs/heads/main'
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      - name: Prepare SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 --decode > key.pem
          chmod 600 key.pem
      - name: Pull & restart container on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}           "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/brake-failure-api:latest &&            docker rm -f brake-api || true &&            docker run -d --name brake-api -p 80:8000 ${{ secrets.DOCKERHUB_USERNAME }}/brake-failure-api:latest"